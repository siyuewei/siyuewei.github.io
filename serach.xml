<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo</title>
    <url>/2025/09/04/Hexo/</url>
    <content><![CDATA[<h1 id="Hexo-静态博客框架使用指南"><a href="#Hexo-静态博客框架使用指南" class="headerlink" title="Hexo 静态博客框架使用指南"></a>Hexo 静态博客框架使用指南</h1><p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js 构建。它可以将 Markdown 文件渲染成静态网页，支持多种主题和插件。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新文章</span></span><br><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新页面</span></span><br><span class="line">hexo new page <span class="string">&quot;页面名称&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建草稿</span></span><br><span class="line">hexo new draft <span class="string">&quot;草稿标题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或简写</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment"># 或简写</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到服务器</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 或简写</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理缓存和生成的文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键生成并部署</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h3 id="草稿相关命令"><a href="#草稿相关命令" class="headerlink" title="草稿相关命令"></a>草稿相关命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发布草稿</span></span><br><span class="line">hexo publish <span class="string">&quot;草稿文件名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览草稿</span></span><br><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装主题</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;theme-repository-url&gt; themes/&lt;theme-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新主题</span></span><br><span class="line"><span class="built_in">cd</span> themes/&lt;theme-name&gt;</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><h3 id="config-yml-主要配置项"><a href="#config-yml-主要配置项" class="headerlink" title="_config.yml 主要配置项"></a>_config.yml 主要配置项</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 设置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://your-domain.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录设置</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">skip_render:</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写作设置</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类和标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页设置</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题设置</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署设置</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository-url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<h2 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h2><h3 id="Front-matter-格式"><a href="#Front-matter-格式" class="headerlink" title="Front-matter 格式"></a>Front-matter 格式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-09-04 00:35:50</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2025-09-04 00:35:50</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">分类1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">分类2</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">文章内容...</span></span><br></pre></td></tr></table></figure>

<h3 id="常用标签语法"><a href="#常用标签语法" class="headerlink" title="常用标签语法"></a>常用标签语法</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 图片</span></span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># 链接</span></span><br><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># 代码块</span></span><br><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">console.log(&#x27;Hello World&#x27;);</span></span><br></pre></td></tr></table></figure>

<!-- # 引用
> 引用内容

# 表格
| 列1 | 列2 | 列3 |
|-----|-----|-----|
| 内容1 | 内容2 | 内容3 | -->


<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="Next-主题常用配置"><a href="#Next-主题常用配置" class="headerlink" title="Next 主题常用配置"></a>Next 主题常用配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题设置</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单设置</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">about</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏设置</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">https://github.com/yourname</span></span><br><span class="line">  <span class="attr">twitter:</span> <span class="string">https://twitter.com/yourname</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">your-email@example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论系统</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">disqus</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">your-disqus-shortname</span></span><br></pre></td></tr></table></figure>

<h2 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h2><h3 id="GitHub-Pages-部署"><a href="#GitHub-Pages-部署" class="headerlink" title="GitHub Pages 部署"></a>GitHub Pages 部署</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;Site updated: <span class="template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他部署方式"><a href="#其他部署方式" class="headerlink" title="其他部署方式"></a>其他部署方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署到服务器</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rsync</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">your-server.com</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">root:</span> <span class="string">/var/www/</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">blog/</span></span><br><span class="line">  <span class="attr">delete:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到腾讯云 COS</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">cos</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">your-bucket-name</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-beijing</span></span><br><span class="line">  <span class="attr">secretId:</span> <span class="string">your-secret-id</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">your-secret-key</span></span><br></pre></td></tr></table></figure>

<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索插件</span></span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点地图</span></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS 订阅</span></span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章阅读时间统计</span></span><br><span class="line">npm install hexo-reading-time --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片懒加载</span></span><br><span class="line">npm install hexo-lazyload-image --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮</span></span><br><span class="line">npm install hexo-prism-plugin --save</span><br></pre></td></tr></table></figure>

<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装图片压缩插件</span></span><br><span class="line">npm install hexo-image-min --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置图片懒加载</span></span><br><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: /images/loading.gif</span><br></pre></td></tr></table></figure>

<h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装压缩插件</span></span><br><span class="line">npm install hexo-html-minifier --save</span><br><span class="line">npm install hexo-clean-css --save</span><br><span class="line">npm install hexo-uglify --save</span><br></pre></td></tr></table></figure>


<hr>
<!-- *本文档会持续更新，如有问题欢迎交流讨论。* -->
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>静态网站</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>BRDF</title>
    <url>/2025/09/24/BRDF/</url>
    <content><![CDATA[<h1 id="BRDF"><a href="#BRDF" class="headerlink" title="BRDF"></a>BRDF</h1><p>BRDF考虑了菲涅尔反射，微表面理论中的法线分布函数、遮蔽函数。</p>
<h2 id="菲涅尔反射"><a href="#菲涅尔反射" class="headerlink" title="菲涅尔反射"></a>菲涅尔反射</h2><p>当一束光线打到平面后，会同时发生反射和折射，入射光的能量被分散到反射和折射上。</p>
<p><img src="/../Image/BRDF/LightReflectionAndRefraction.png" alt="光的反射和折射"></p>
<p>菲涅尔效应（Fresnel Effect）指的是反射随着掠射角(Glancing Angle, 入射光与表面的夹角) 的增大而减小。也即当入射光方向越垂直平面，折射越强；当入射光方向越平行平面，反射越强。</p>
<p><img src="/../Image/BRDF/FresnelSchematic.png" alt="菲涅尔效应示意图"></p>
<p>所以看物体在水面的倒影时，离我们远的物体更清楚，因为反射更强，离我们近的物体更模糊，因为反射更弱。</p>
<h3 id="菲涅尔方程"><a href="#菲涅尔方程" class="headerlink" title="菲涅尔方程"></a>菲涅尔方程</h3><p>菲涅尔方程给出了不同偏振下的反射率。设入射介质折射率为 $n_1$，透射介质为 $n_2$，入射角为 $\theta_i$，折射角为 $\theta_t$，满足斯涅尔定律 $n_1\sin\theta_i &#x3D; n_2\sin\theta_t$。</p>
<ul>
<li><p>非导体（介电质，$\kappa&#x3D;0$）：<br>$$<br>R_s &#x3D; \left(\frac{n_1\cos\theta_i - n_2\cos\theta_t}{n_1\cos\theta_i + n_2\cos\theta_t}\right)^2,\quad<br>R_p &#x3D; \left(\frac{n_1\cos\theta_t - n_2\cos\theta_i}{n_1\cos\theta_t + n_2\cos\theta_i}\right)^2<br>$$<br>未偏振光的反射率为 $ R &#x3D; (R_s + R_p)&#x2F;2 $。当 $n_1&gt;n_2$ 且 $\sin\theta_i &gt; n_2&#x2F;n_1$ 时发生全反射：$R&#x3D;1$。</p>
</li>
<li><p>导体（复折射率 $\tilde{n}&#x3D;\eta + i\kappa$）：令 $c&#x3D;\cos\theta_i$，则<br>$$<br>R_s &#x3D; \frac{(\eta^2+\kappa^2) - 2\eta c + c^2}{(\eta^2+\kappa^2) + 2\eta c + c^2},\quad<br>R_p &#x3D; \frac{(\eta^2+\kappa^2)c^2 - 2\eta c + 1}{(\eta^2+\kappa^2)c^2 + 2\eta c + 1}<br>$$<br>同样取 $ R &#x3D; (R_s + R_p)&#x2F;2 $。</p>
</li>
</ul>
<p>为实际渲染常用的近似：</p>
<ul>
<li><p>Schlick 近似（介电质）：<br>$$<br>R(\theta_i) &#x3D; R_0 + (1-R_0)(1-\cos\theta_i)^5,\quad<br>R_0 &#x3D; \left(\frac{n_1-n_2}{n_1+n_2}\right)^2<br>$$</p>
</li>
<li><p>Schlick 近似（导体，按通道）：<br>$$<br>R_0 &#x3D; \frac{(\eta-1)^2+\kappa^2}{(\eta+1)^2+\kappa^2}<br>$$</p>
</li>
</ul>
<h2 id="微表面理论"><a href="#微表面理论" class="headerlink" title="微表面理论"></a>微表面理论</h2><p>微表面模型是把宏观上的一块平面，看成若干个微小有起伏的平面的组合。<br>如下图所示，dS层可以看作宏观上的平面，dA层则是微观上的若干个微表面。</p>
<p><img src="/../Image/BRDF/MicrosurfaceSchematic.png" alt="微表面模型示意图"></p>
<h3 id="法线分布函数（NDF，Normal-Distribution-Function）"><a href="#法线分布函数（NDF，Normal-Distribution-Function）" class="headerlink" title="法线分布函数（NDF，Normal Distribution Function）"></a>法线分布函数（NDF，Normal Distribution Function）</h3><p>对于每一个微表面，都有自己的微表面法线$m$，表面的宏观法线一般表示为$n$。法线分布函数是用来描述微表面法线的分布情况的函数$D(m)$。</p>
<p>法线分布函数是对微表面法线在微观几何表面上的统计分布，即$D(m)$表示法线方向为$m$的微表面在微观几何中的密度。</p>
<p>法线分布函数有如下性质：</p>
<ul>
<li>法线分布函数与微平面法线的积分为微表面面积。</li>
</ul>
<p><img src="/../Image/BRDF/%E6%80%A7%E8%B4%A81.png" alt="性质1"></p>
<p>$$<br>A_{\text{micro}}<br>&#x3D; \int_{\Omega^+} D(m),\mathrm{d}\omega_m ;;\ge; 1<br>\quad (\text{以宏观单位面积为基准})<br>$$</p>
<ul>
<li>微平面法线投影到宏观表面上面积的积分为宏观表面面积(规定为1)。</li>
</ul>
<p><img src="/../Image/BRDF/MicrosurfaceSchematic.png" alt="性质2"></p>
<p>$$<br>\int_{\Omega^+} D(m),\big(n\cdot m\big),\mathrm{d}\omega_m<br>&#x3D; 1<br>$$</p>
<ul>
<li>微表面法线投影到视角垂平面等效于宏观法线投影到视角垂平面。</li>
</ul>
<p><img src="/../Image/BRDF/%E6%80%A7%E8%B4%A83.png" alt="性质3"></p>
<p>设视线方向为 $v$ 且 $n\cdot v&gt;0$，则有<br>$$<br>\int_{\Omega^+} D(m),\max!\big(0,,v\cdot m\big),\mathrm{d}\omega_m<br>&#x3D; n\cdot v<br>$$</p>
<h4 id="常见的法线函数"><a href="#常见的法线函数" class="headerlink" title="常见的法线函数"></a>常见的法线函数</h4><p>设半程向量为 $h$，宏观法线为 $n$，$c&#x3D;n\cdot h&#x3D;\cos\theta_h$。</p>
<ul>
<li><p>Phong（经典各向同性）：<br>$$<br>D_{\text{Phong}}(h) &#x3D; \frac{n_p+2}{2\pi},c^{,n_p}\quad (c&gt;0)<br>$$</p>
</li>
<li><p>Beckmann（高斯斜率）：<br>$$<br>D_{\text{Beck}}(h) &#x3D; \frac{\exp!\left(-\tan^2!\theta_h&#x2F;\alpha^2\right)}{\pi,\alpha^2,c^{4}}<br>$$</p>
</li>
<li><p>GGX &#x2F; Trowbridge–Reitz：<br>$$<br>D_{\text{GGX}}(h) &#x3D; \frac{\alpha^2}{\pi,\big[(\alpha^2-1),c^2 + 1\big]^2}<br>$$</p>
</li>
<li><p>各向异性 GGX（切线空间粗糙度 $\alpha_x,\alpha_y$）：<br>$$<br>D_{\text{GGX-aniso}}(h) &#x3D; \frac{1}{\pi,\alpha_x\alpha_y,\Big[\big(h_x&#x2F;\alpha_x\big)^2 + \big(h_y&#x2F;\alpha_y\big)^2 + h_z^2\Big]^2}<br>$$</p>
</li>
</ul>
<p>参数与粗糙度的常用近似关系（经验）：<br>$$<br>\alpha \approx \text{roughness}^2,\qquad n_p \approx \frac{2}{\alpha^2}-2<br>$$<br>其中 $\text{roughness}\in[0,1]$ 为艺术参数，$n_p$ 为 Phong 指数。</p>
<h3 id="联合遮蔽-阴影函数-joint-masking-shadowing-function"><a href="#联合遮蔽-阴影函数-joint-masking-shadowing-function" class="headerlink" title="联合遮蔽-阴影函数(joint masking-shadowing function)"></a>联合遮蔽-阴影函数(joint masking-shadowing function)</h3><p>在微表面模型中，光线在微表面上的弹射会导致遮挡，有 $Shadowing$ 和 $Masking$ 两种情况。$Shadowing$ 是入射光被微表面遮挡，$Masking$ 是反射光被微表面遮挡。一般用 $G_1(v,m)$ 表示 Masking。</p>
<p><img src="/../Image/BRDF/%E5%85%89%E5%9C%A8%E5%BE%AE%E8%A1%A8%E9%9D%A2%E7%9A%84%E5%BC%B9%E5%B0%84.png" alt="光在微表面的弹射"></p>
<p>同时考虑 $Shadowing$ 和 $Masking$ 两种情况的函数被称为联合遮蔽-阴影函数 $G_2(l,v,m)$，也被称为几何函数。</p>
<p>实际应用中，常用 $The Smith Shadow-Masking G2$ 函数，它将$Shadowing$和$Masking$分开考虑。由于光路的可逆性，我们可以认为两种情况是近似等效的，因为用 $G_1(v,m)$ 表示$ Masking$，则用$G_1(l,m)$ 表示 $Shadowing$。</p>
<p>$$<br>G_2(l,v,m) &#x3D; G_1(v,m),G_1(l,m)<br>$$</p>
<p>它建立在Shadowing和Masking不相关的基础上，但实际上它们是相关的。使用这个G2会导致BRDFs结果偏暗。</p>
<h2 id="宏观BRDF"><a href="#宏观BRDF" class="headerlink" title="宏观BRDF"></a>宏观BRDF</h2><p>基于微表面理论，给出微BRDF $f_{u}(l,v,m)$，法线分布函数$D(m)$，联合遮蔽-阴影函数$G_2(l,v,m)$，可以推出宏观BRDF</p>
<p>$$<br>f(l,v) &#x3D; \int_{m \in \Omega^+} f_{u}(l,v,m),D(m),G_2(l,v,m),\frac{\max(0,,m\cdot l)}{|n\cdot l|},\frac{\max(0,,m\cdot v)}{|n\cdot v|},\mathrm{d}\omega_m<br>$$</p>
<p>$\frac{\max(0,,m\cdot l)}{|n\cdot l|}$,$\frac{\max(0,,m\cdot v)}{|n\cdot v|}$是为了归一化。</p>
<h2 id="镜面反射BRDF"><a href="#镜面反射BRDF" class="headerlink" title="镜面反射BRDF"></a>镜面反射BRDF</h2><p>在镜面微面元模型下，每个微平面都是一个完美的菲涅尔镜(Fresnel mirror)。只有当微平面的法线 $m$ 与 $l$ 和 $v$ 的半程向量 $h &#x3D; \frac{l+v}{\lVert l+v\rVert}$ 一致时，该微面元才把能量反射进视线方向。</p>
<p><img src="/../Image/BRDF/%E8%8F%B2%E6%B6%85%E5%B0%94%E9%95%9C.png" alt="菲涅尔镜"></p>
<p>$$<br>h &#x3D; \frac{l+v}{\lVert l+v\rVert},\quad m &#x3D; h,\quad n\cdot l&gt;0,; n\cdot v&gt;0,; l\cdot m&gt;0,; v\cdot m&gt;0<br>$$<br>等价的反射约束写法为：<br>$$<br>v &#x3D; 2,(m\cdot l),m - l<br>$$</p>
<h1 id="一种常用的BRDF——Cook-Torrance-BRDF"><a href="#一种常用的BRDF——Cook-Torrance-BRDF" class="headerlink" title="一种常用的BRDF——Cook Torrance BRDF"></a>一种常用的BRDF——Cook Torrance BRDF</h1><p>Cook-Torrance BRDF兼有漫反射和镜面反射两个部分：</p>
<p>$$<br>f_{r} &#x3D; k_{d}f_{lambert} + k_{s}f_{cook-torrance}<br>$$</p>
<ul>
<li>$k_{d}$表示入射光线中，被折射部分能量的比率</li>
<li>$k_{s}$表示反射光线中，被反射部分的比率</li>
<li>$k_{d}$ 和 $k_{s}$一般由艺术家设置，不同的材质，这两个参数的值不同</li>
</ul>
<h2 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h2><p>$$<br>f_{lambert} &#x3D; \frac{c}{\pi}<br>$$</p>
<ul>
<li>$c$表示表面颜色</li>
<li>$\pi$ 是为了对漫反射光标准化，因为前面含有BRDF的积分方程是受 $\pi$ 影响的</li>
</ul>
<p>Lambertian漫反射模型已经足够应付大多数实时渲染的用途了</p>
<h2 id="镜面反射"><a href="#镜面反射" class="headerlink" title="镜面反射"></a>镜面反射</h2><p>对于Cook Torrance BRDF，<br>半程向量 $h&#x3D;\dfrac{l+v}{\lVert l+v\rVert}$，取理想镜面微 BRDF 为<br>$$<br>f_u(l,v,m)&#x3D;<br>\begin{cases}<br>\dfrac{F(v,m)}{4,|v\cdot m|,|l\cdot m|}, &amp; m &#x3D; h \<br>0, &amp; m \ne h<br>\end{cases}<br>$$<br>代入宏观BRDF积分<br>$$<br>f(l,v) &#x3D; \int_{m \in \Omega^+} f_{u}(l,v,m),D(m),G_2(l,v,m),\frac{\max(0,,m\cdot l)}{|n\cdot l|},\frac{\max(0,,m\cdot v)}{|n\cdot v|},\mathrm{d}\omega_m<br>$$<br>可得<br>$$<br>f_{cook-torrance}(l,v) &#x3D; \frac{D(h),G_2(l,v,h),F(v,h)}{4,|n\cdot l|,|n\cdot v|}<br>$$</p>
<h2 id="最终公式"><a href="#最终公式" class="headerlink" title="最终公式"></a>最终公式</h2><p>$$<br>f_{r} &#x3D; k_{d}\frac{c}{\pi} + k_{s}\frac{D(h),G_2(l,v,h),F(v,h)}{4,|n\cdot l|,|n\cdot v|}<br>$$</p>
<p>一般而言，</p>
<ul>
<li><p>D公式选用Trowbridge-Reitz GGX函数近似<br>$$<br>D_{\text{GGX}}(h) &#x3D; \frac{\alpha^2}{\pi,\big[(\alpha^2-1),c^2 + 1\big]^2}<br>$$<br>$\alpha$为粗糙度。</p>
</li>
<li><p>F项选用schilick近似<br>$$<br>F_{schilick}(v,h,F_0) &#x3D; F_0 + (1-F_0),\big(1- v\cdot h\big)^5<br>$$</p>
</li>
<li><p>G的公式选用schlick-GGX近似<br>$$<br>G_{ggx}(n,v,k) &#x3D; \frac{n \cdot v}{(n \cdot v)(1-k) + k}<br>$$</p>
</li>
</ul>
<p>$k$ 是一个和粗糙度roughness有关的常数。 一个完整的G函数由两部分组成:</p>
<p>$$<br>G(n, v, l, k) \approx G_{ggx}(n,v,k) G_{ggx}(n,l,k)<br>$$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vec3 evaluateSpecular(...)</span><br><span class="line">&#123;</span><br><span class="line">    //计算光线达到点p处的能量</span><br><span class="line">    float radiance = evaluateRadiance(light, pixel); </span><br><span class="line"></span><br><span class="line">    float NDF = evaluateDistributionGGX(...);  //法线方程  </span><br><span class="line">    float G   = evaluateGeometrySmith(...);    //几何函数</span><br><span class="line">    vec3 F    = evaluateFresnelSchlick(...);   //菲涅尔函数</span><br><span class="line"></span><br><span class="line">    float denominator = ...;  //根据一些参数计算出一个常量</span><br><span class="line">    vec3 specular = NDF * G * F / denominator;</span><br><span class="line"></span><br><span class="line">    return specular;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>知乎专栏合集：BRDF&#x2F;渲染相关 <a href="https://zhuanlan.zhihu.com/c_1647165706373316609">链接</a></li>
<li>知识库&#x2F;计算机图形学&#x2F;Cook Torrance BRDF <a href="https://geodoer.github.io/A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/2-%E6%B8%B2%E6%9F%93%E6%A6%82%E8%BF%B0/%E5%85%89%E7%85%A7%E4%B8%8E%E6%9D%90%E8%B4%A8/PBR/PBR%E5%8E%9F%E7%90%86/BRDF/Cook-Torrance%20BRDF/">链接</a></li>
<li>PBR渲染: Cook-Torrance的实现与补充 <a href="https://www.blurredcode.com/2021/05/dec701b2/#%e5%87%a0%e4%bd%95%e9%81%ae%e8%94%bd%e9%a1%b9g">链接</a></li>
</ul>
]]></content>
      <categories>
        <category>Rendering</category>
      </categories>
      <tags>
        <tag>Rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>RayTracing</title>
    <url>/2025/09/22/RayTracing/</url>
    <content><![CDATA[<h1 id="RayTracing概述"><a href="#RayTracing概述" class="headerlink" title="RayTracing概述"></a>RayTracing概述</h1><h2 id="渲染方程"><a href="#渲染方程" class="headerlink" title="渲染方程"></a>渲染方程</h2><p>每个点的Radiance &#x3D; 该点的自发光Radiance + 该点反射出的 来自其他光源的Radiance。</p>
<p>$$L_o(p,\omega_o) &#x3D; L_e(p,\omega_o) + \int_{\Omega} f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) \cos\theta_i d\omega_i$$ </p>
<p>其中：</p>
<ul>
<li>$p$ 是表面上的点（point on surface）</li>
<li>$\omega_o$ 是出射方向（outgoing direction）</li>
<li>$\omega_i$ 是入射方向（incoming direction）</li>
<li>$L_o(p,\omega_o)$ 是从点 $p$ 沿方向 $\omega_o$ 出射的辐射度（outgoing radiance）</li>
<li>$L_e(p,\omega_o)$ 是点 $p$ 沿方向 $\omega_o$ 的自发光辐射度（emitted radiance）</li>
<li>$f_r(p,\omega_i,\omega_o)$ 是双向反射分布函数（BRDF - Bidirectional Reflectance Distribution Function）</li>
<li>$L_i(p,\omega_i)$ 是从方向 $\omega_i$ 入射到点 $p$ 的辐射度（incoming radiance）</li>
<li>$\cos\theta_i$ 是入射角 $\theta_i$ 的余弦值，表示光线与表面法线的夹角</li>
<li>$\Omega$ 是半球积分域（hemisphere integration domain）</li>
<li>$d\omega_i$ 是立体角微元（solid angle differential）</li>
</ul>
<h3 id="物理意义解释"><a href="#物理意义解释" class="headerlink" title="物理意义解释"></a>物理意义解释</h3><p>渲染方程描述了光线在表面上的反射行为：</p>
<ol>
<li><strong>自发光项</strong> $L_e(p,\omega_o)$：表示表面本身发出的光，如灯泡、火焰等光源</li>
<li><strong>反射项</strong> $\int_{\Omega} f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) \cos\theta_i d\omega_i$：<ul>
<li>积分表示对所有可能入射方向的贡献求和</li>
<li>BRDF $f_r$ 描述材料如何将入射光反射到出射方向</li>
<li>$\cos\theta_i$ 项体现了朗伯定律（Lambert’s law），入射角越大，贡献越小</li>
<li>这个积分计算了来自所有方向的光线对出射辐射度的贡献</li>
</ul>
</li>
</ol>
<h3 id="数学含义"><a href="#数学含义" class="headerlink" title="数学含义"></a>数学含义</h3><ul>
<li>这是一个<strong>积分方程</strong>，因为 $L_i$ 本身可能依赖于其他表面的 $L_o$</li>
<li>在全局光照中，这个方程需要递归求解</li>
<li>在光线追踪中，我们通过采样来近似这个积分</li>
</ul>
<h2 id="BRDF（双向反射分布函数）"><a href="#BRDF（双向反射分布函数）" class="headerlink" title="BRDF（双向反射分布函数）"></a>BRDF（双向反射分布函数）</h2><p>BRDF $f_r(p,\omega_i,\omega_o)$ 描述了材料如何将入射光反射到出射方向。它满足以下性质：</p>
<h3 id="1-能量守恒"><a href="#1-能量守恒" class="headerlink" title="1. 能量守恒"></a>1. 能量守恒</h3><p>$$\int_{\Omega} f_r(p,\omega_i,\omega_o) \cos\theta_i d\omega_i \leq 1$$</p>
<h3 id="2-互易性（Helmholtz互易性）"><a href="#2-互易性（Helmholtz互易性）" class="headerlink" title="2. 互易性（Helmholtz互易性）"></a>2. 互易性（Helmholtz互易性）</h3><p>$$f_r(p,\omega_i,\omega_o) &#x3D; f_r(p,\omega_o,\omega_i)$$</p>
<h3 id="3-常见BRDF模型"><a href="#3-常见BRDF模型" class="headerlink" title="3. 常见BRDF模型"></a>3. 常见BRDF模型</h3><p><strong>朗伯反射（Lambertian）</strong>：<br>$$f_r(p,\omega_i,\omega_o) &#x3D; \frac{\rho}{\pi}$$</p>
<p>其中 $\rho$ 是反射率（albedo）。</p>
<p><strong>镜面反射（Specular）</strong>：<br>$$f_r(p,\omega_i,\omega_o) &#x3D; \frac{F(\theta_h) D(\theta_h) G(\omega_i,\omega_o)}{4\cos\theta_i\cos\theta_o}$$</p>
<p>其中：</p>
<ul>
<li>$F$ 是菲涅尔反射系数</li>
<li>$D$ 是法线分布函数</li>
<li>$G$ 是几何遮蔽函数</li>
</ul>
<h2 id="PDF（概率密度函数）解释"><a href="#PDF（概率密度函数）解释" class="headerlink" title="PDF（概率密度函数）解释"></a>PDF（概率密度函数）解释</h2><p>PDF（Probability Density Function）是蒙特卡洛积分中的关键概念：</p>
<h3 id="什么是PDF？"><a href="#什么是PDF？" class="headerlink" title="什么是PDF？"></a>什么是PDF？</h3><ul>
<li><strong>定义</strong>：PDF $p(\omega_i)$ 描述在方向 $\omega_i$ 上采样的概率密度</li>
<li><strong>作用</strong>：告诉我们在哪个方向更可能采样到重要的光线</li>
<li><strong>归一化</strong>：$\int_{\Omega} p(\omega_i) d\omega_i &#x3D; 1$</li>
</ul>
<h3 id="为什么需要PDF？"><a href="#为什么需要PDF？" class="headerlink" title="为什么需要PDF？"></a>为什么需要PDF？</h3><p>在渲染方程中：<br>$$L_o(p,\omega_o) &#x3D; L_e(p,\omega_o) + \int_{\Omega} f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) \cos\theta_i d\omega_i$$</p>
<p>我们通过随机采样来近似这个积分：<br>$$\approx L_e(p,\omega_o) + \frac{1}{N} \sum_{i&#x3D;1}^{N} \frac{f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) \cos\theta_i}{p(\omega_i)}$$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总贡献 = 0</span><br><span class="line">for i = 1 to N:</span><br><span class="line">    ω = 根据PDF随机选择一个方向</span><br><span class="line">    贡献 = fr(ω) * Li(ω) * cos(θ) / pdf(ω)</span><br><span class="line">    总贡献 += 贡献</span><br><span class="line">最终结果 = 总贡献 / N</span><br></pre></td></tr></table></figure>

<h3 id="常见PDF策略"><a href="#常见PDF策略" class="headerlink" title="常见PDF策略"></a>常见PDF策略</h3><ol>
<li><strong>均匀采样</strong>：$p(\omega_i) &#x3D; \frac{1}{2\pi}$（所有方向等概率）</li>
<li><strong>余弦加权采样</strong>：$p(\omega_i) &#x3D; \frac{\cos\theta_i}{\pi}$（更可能采样接近法线的方向）</li>
<li><strong>BRDF采样</strong>：$p(\omega_i) \propto f_r(p,\omega_i,\omega_o)$（根据BRDF形状采样）</li>
<li><strong>光源采样</strong>：$p(\omega_i) \propto \frac{1}{d^2}$（更可能采样距离近的光源方向）</li>
</ol>
<h3 id="光源采样详解"><a href="#光源采样详解" class="headerlink" title="光源采样详解"></a>光源采样详解</h3><p>光源采样是一种重要的优化技术，直接向光源方向采样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 光源采样伪代码</span><br><span class="line">Vector3 sampleLight(Point p) &#123;</span><br><span class="line">    // 选择光源</span><br><span class="line">    Light light = selectLight();</span><br><span class="line">    </span><br><span class="line">    // 计算从p到光源的方向</span><br><span class="line">    Vector3 lightDir = normalize(light.position - p);</span><br><span class="line">    </span><br><span class="line">    // 计算距离</span><br><span class="line">    float distance = length(light.position - p);</span><br><span class="line">    </span><br><span class="line">    // 计算PDF（考虑距离衰减）</span><br><span class="line">    float pdf = 1.0 / (distance * distance);</span><br><span class="line">    </span><br><span class="line">    return lightDir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在shade函数中使用</span><br><span class="line">shade(p, wo) &#123;</span><br><span class="line">    Lo = Le(p, wo)</span><br><span class="line">    </span><br><span class="line">    // 1. 光源采样（直接光照）</span><br><span class="line">    Vector3 wi_light = sampleLight(p);</span><br><span class="line">    Ray shadowRay(p, wi_light);</span><br><span class="line">    if (!intersect(shadowRay)) &#123;</span><br><span class="line">        float cosTheta = dot(normal, wi_light);</span><br><span class="line">        Lo += fr(p,wi_light,wo) * light.intensity * cosTheta / pdf_light;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 2. BRDF采样（间接光照）</span><br><span class="line">    Vector3 wi_brdf = sampleBRDF(wo);</span><br><span class="line">    // ... 递归计算</span><br><span class="line">    </span><br><span class="line">    return Lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多重重要性采样（MIS）"><a href="#多重重要性采样（MIS）" class="headerlink" title="多重重要性采样（MIS）"></a>多重重要性采样（MIS）</h3><p>结合光源采样和BRDF采样，使用权重函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 权重函数</span><br><span class="line">float powerHeuristic(float pdf1, float pdf2) &#123;</span><br><span class="line">    float w1 = pdf1 * pdf1;</span><br><span class="line">    float w2 = pdf2 * pdf2;</span><br><span class="line">    return w1 / (w1 + w2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在shade函数中</span><br><span class="line">shade(p, wo) &#123;</span><br><span class="line">    Lo = Le(p, wo)</span><br><span class="line">    </span><br><span class="line">    // 光源采样</span><br><span class="line">    Vector3 wi_light = sampleLight(p);</span><br><span class="line">    float pdf_light = lightPdf(wi_light);</span><br><span class="line">    float pdf_brdf = brdfPdf(wi_light, wo);</span><br><span class="line">    float weight_light = powerHeuristic(pdf_light, pdf_brdf);</span><br><span class="line">    </span><br><span class="line">    // BRDF采样  </span><br><span class="line">    Vector3 wi_brdf = sampleBRDF(wo);</span><br><span class="line">    float pdf_brdf2 = brdfPdf(wi_brdf, wo);</span><br><span class="line">    float pdf_light2 = lightPdf(wi_brdf);</span><br><span class="line">    float weight_brdf = powerHeuristic(pdf_brdf2, pdf_light2);</span><br><span class="line">    </span><br><span class="line">    // 加权求和</span><br><span class="line">    Lo += weight_light * evaluateLightContribution(wi_light);</span><br><span class="line">    Lo += weight_brdf * evaluateBRDFContribution(wi_brdf);</span><br><span class="line">    </span><br><span class="line">    return Lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h3><ul>
<li><strong>目标</strong>：减少噪声，提高收敛速度</li>
<li><strong>原理</strong>：在贡献大的区域多采样，在贡献小的区域少采样</li>
<li><strong>效果</strong>：相同样本数下获得更准确的结果</li>
</ul>
<h2 id="直接光照"><a href="#直接光照" class="headerlink" title="直接光照"></a>直接光照</h2><p>只考虑直接光照的光追，是从屏幕每个pixel发出射线，射线方向是viewpoint-&gt;pixel，计算每条光线上的Radiance。如果光线打到光源，则增加Radiance的值。</p>
<p>对于直接光照，渲染方程简化为：</p>
<p>$$L_o(p,\omega_o) &#x3D; L_e(p,\omega_o) + \sum_{i&#x3D;1}^{n} f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) \cos\theta_i$$</p>
<p>其中：</p>
<ul>
<li>$L_o(p,\omega_o)$ 是出射辐射度（outgoing radiance）</li>
<li>$L_e(p,\omega_o)$ 是自发光辐射度（emitted radiance）</li>
<li>$f_r(p,\omega_i,\omega_o)$ 是BRDF（双向反射分布函数）</li>
<li>$L_i(p,\omega_i)$ 是入射辐射度（incoming radiance）</li>
<li>$\cos\theta_i$ 是入射角余弦值</li>
<li>$n$ 是光源数量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shade(p,w0)</span><br><span class="line">    Lo = Le(p,wo)  // 自发光项</span><br><span class="line">    Randomly sample N directions wi (i=1 to N) based on the pdf</span><br><span class="line">    For each wi</span><br><span class="line">        Trace a ray r(p,wi)</span><br><span class="line">        if ray hit a light</span><br><span class="line">            Lo += (1/N) * fr(p,wi,wo) * Li(p,wi) * cos(θi) / pdf(wi)</span><br><span class="line">    return Lo</span><br></pre></td></tr></table></figure>

<h2 id="全局光照"><a href="#全局光照" class="headerlink" title="全局光照"></a>全局光照</h2><p>不仅仅只考虑打到光源的光线，如果光线打到某个物体上，则把这个物体也当作一个起点，发散$N$条光线，看是否接触到光源，或是别的物体。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shade(p,w0)</span><br><span class="line">    Lo = Le(p,wo)  // 自发光项</span><br><span class="line">    Randomly sample N directions wi (i=1 to N) based on the pdf</span><br><span class="line">    For each wi</span><br><span class="line">        Trace a ray r(p,wi)</span><br><span class="line">        if ray hit a light</span><br><span class="line">            Lo += (1/N) * fr(p,wi,wo) * Li(p,wi) * cos(θi) / pdf(wi)</span><br><span class="line">        else if ray hit an object at q</span><br><span class="line">            Lo += (1/N) * shade(q, -wi) * f_r * cos(θi) / pdf(wi)</span><br><span class="line">    return Lo</span><br></pre></td></tr></table></figure>

<p><img src="/../Image/RayTracing/RayTracingForGlobal.png" alt="考虑全局光照的光追"></p>
<p>光线的传播如下图所示，性能爆炸：<br><img src="/../Image/RayTracing/LightTrace.png" alt="光线传播"></p>
<h2 id="路径追踪（一个具体的光追算法）"><a href="#路径追踪（一个具体的光追算法）" class="headerlink" title="路径追踪（一个具体的光追算法）"></a>路径追踪（一个具体的光追算法）</h2><p>在全局光照中，如果取$N &#x3D; 1$，那么这个算法就被称为路径追踪</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shade(p,w0)</span><br><span class="line">    Lo = Le(p,wo)  // 自发光项</span><br><span class="line">    Randomly choose ONE direction wi(i=1) base on pdf</span><br><span class="line">    Trace a ray r(p,wi)</span><br><span class="line">    if ray hit a light</span><br><span class="line">        Lo += fr(p,wi,wo) * Li(p,wi) * cos(θi) / pdf(wi)</span><br><span class="line">    else if ray hit an object at q</span><br><span class="line">        Lo += shade(q, -wi) * f_r * cos(θi) / pdf(wi)</span><br><span class="line">    return Lo</span><br></pre></td></tr></table></figure>

<h2 id="Ray-Generation"><a href="#Ray-Generation" class="headerlink" title="Ray Generation"></a>Ray Generation</h2><p>上面讲的是从viewpoint to piexl打出一条光线后，这条光线如何计算。这里讲从viewpoint to piexl的光线是如何生成的，以及如何计算最终的渲染结果。一个pixel也可以打出若干条光线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ray_generation(camPos，pixel)</span><br><span class="line">    Uniformly choose N sample positions within the pixel</span><br><span class="line">    pixel_radiance = 0.0</span><br><span class="line">    for each sample in the pixel:</span><br><span class="line">        Shoot a ray r(camPos, camPos_to_sample)</span><br><span class="line">        if ray r hit p（object or light）</span><br><span class="line">            pixel_radiance += 1/N * shade(p，sample_to_camPos)</span><br><span class="line">    return pixel_radiance</span><br></pre></td></tr></table></figure>
<p>这里p不需要区分是光源还是普通物体，因为shade函数已经包含了自发光项$L_e(p,\omega_o)$，能够统一处理两种情况：</p>
<ul>
<li>如果p是光源，自发光项会返回光源的辐射度</li>
<li>如果p是普通物体，自发光项为零，只计算反射光</li>
</ul>
<h2 id="算法停止"><a href="#算法停止" class="headerlink" title="算法停止"></a>算法停止</h2><h3 id="俄罗斯轮盘赌（Russian-Roulette）"><a href="#俄罗斯轮盘赌（Russian-Roulette）" class="headerlink" title="俄罗斯轮盘赌（Russian Roulette）"></a>俄罗斯轮盘赌（Russian Roulette）</h3><p>在光线追踪中，递归可能无限进行下去，需要一种机制来停止算法。俄罗斯轮盘赌是一种概率终止方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shade(p, wo, depth) </span><br><span class="line">    // 俄罗斯轮盘赌：设定一个概率值continue_probability，随机取一个[0,1]的random()值</span><br><span class="line">    if random() &gt; continue_probability:</span><br><span class="line">        return 0.0;  // 终止递归</span><br><span class="line">    </span><br><span class="line">    Lo = Le(p, wo)  // 自发光项</span><br><span class="line">    Randomly sample ONE direction wi based on pdf</span><br><span class="line">    Trace a ray r(p, wi)</span><br><span class="line">    if ray hit a light:</span><br><span class="line">        Lo += fr(p,wi,wo) * Li(p,wi) * cos(θi) / pdf(wi)</span><br><span class="line">    else if ray hit an object at q:</span><br><span class="line">        Lo += shade(q, -wi, depth+1) * fr(p,wi,wo) * cos(θi) / pdf(wi)</span><br><span class="line">    </span><br><span class="line">    // 补偿能量：除以继续概率</span><br><span class="line">    return Lo / continue_probability</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Rendering</category>
      </categories>
      <tags>
        <tag>Rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>Rendering ToolTips</title>
    <url>/2025/09/03/Rendering/</url>
    <content><![CDATA[<h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><ul>
<li>renderDoc：支持对应用截帧分析</li>
</ul>
]]></content>
      <categories>
        <category>Rendering</category>
      </categories>
      <tags>
        <tag>Rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools</title>
    <url>/2025/09/04/Tools/</url>
    <content><![CDATA[<h1 id="妙妙工具合集"><a href="#妙妙工具合集" class="headerlink" title="妙妙工具合集"></a>妙妙工具合集</h1><p><a href="https://realfavicongenerator.net/">https://realfavicongenerator.net/</a> 上传一张图片，生成浏览器图片所需的图片格式</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/09/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>虚函数和CRTP</title>
    <url>/2025/10/18/%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8CCRTP/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在C++中，实现多态（polymorphism）是面向对象编程的核心特性之一。本文将深入探讨两种实现多态的机制：<strong>虚函数（Virtual Functions）<strong>和</strong>CRTP（Curiously Recurring Template Pattern，奇异递归模板模式）</strong>。我们将详细解释它们的原理、使用场景，并进行全面的对比分析。</p>
<hr>
<h1 id="虚函数（Virtual-Functions）"><a href="#虚函数（Virtual-Functions）" class="headerlink" title="虚函数（Virtual Functions）"></a>虚函数（Virtual Functions）</h1><h2 id="什么是虚函数？"><a href="#什么是虚函数？" class="headerlink" title="什么是虚函数？"></a>什么是虚函数？</h2><p>虚函数是C++中实现**运行时多态（Runtime Polymorphism）**的机制。通过在基类中使用<code>virtual</code>关键字声明函数，派生类可以重写（override）这些函数，从而在运行时根据对象的实际类型来调用相应的函数实现。</p>
<h2 id="虚函数的工作原理"><a href="#虚函数的工作原理" class="headerlink" title="虚函数的工作原理"></a>虚函数的工作原理</h2><p>虚函数的实现依赖于**虚函数表（Virtual Table，简称vtable）**机制：</p>
<ol>
<li><strong>虚函数表（vtable）</strong>：每个包含虚函数的类都有一个虚函数表，存储指向该类虚函数实现的指针。</li>
<li><strong>虚指针（vptr）</strong>：每个包含虚函数的类的对象都会有一个隐藏的指针（vptr），指向该类的虚函数表。</li>
<li><strong>动态绑定</strong>：在运行时，通过vptr找到对应的vtable，再从vtable中找到正确的函数地址并调用。</li>
</ol>
<h3 id="内存布局示意"><a href="#内存布局示意" class="headerlink" title="内存布局示意"></a>内存布局示意</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象内存布局：</span><br><span class="line">+-----------------+</span><br><span class="line">| vptr (虚指针)   | -----&gt; +-------------------+</span><br><span class="line">+-----------------+        | vtable            |</span><br><span class="line">| 成员变量        |        +-------------------+</span><br><span class="line">+-----------------+        | 虚函数1地址       |</span><br><span class="line">                           | 虚函数2地址       |</span><br><span class="line">                           | ...               |</span><br><span class="line">                           +-------------------+</span><br></pre></td></tr></table></figure>

<h2 id="虚函数使用示例"><a href="#虚函数使用示例" class="headerlink" title="虚函数使用示例"></a>虚函数使用示例</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="keyword">default</span>;  <span class="comment">// 虚析构函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Animal makes a sound&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Animal moves&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：狗</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog barks: Woof! Woof!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog runs on four legs&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：猫</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat meows: Meow! Meow!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat walks gracefully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：鸟</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bird chirps: Tweet! Tweet!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bird flies in the sky&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用多态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">demonstratePolymorphism</span><span class="params">(<span class="type">const</span> Animal&amp; animal)</span> </span>&#123;</span><br><span class="line">    animal.<span class="built_in">makeSound</span>();</span><br><span class="line">    animal.<span class="built_in">move</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    Cat cat;</span><br><span class="line">    Bird bird;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=== 运行时多态演示 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">demonstratePolymorphism</span>(dog);</span><br><span class="line">    <span class="built_in">demonstratePolymorphism</span>(cat);</span><br><span class="line">    <span class="built_in">demonstratePolymorphism</span>(bird);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用指针</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=== 使用指针 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    Animal* animals[] = &#123;&amp;dog, &amp;cat, &amp;bird&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>* animal : animals) &#123;</span><br><span class="line">        animal-&gt;<span class="built_in">makeSound</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=== 运行时多态演示 ===</span><br><span class="line">Dog barks: Woof! Woof!</span><br><span class="line">Dog runs on four legs</span><br><span class="line">---</span><br><span class="line">Cat meows: Meow! Meow!</span><br><span class="line">Cat walks gracefully</span><br><span class="line">---</span><br><span class="line">Bird chirps: Tweet! Tweet!</span><br><span class="line">Bird flies in the sky</span><br><span class="line">---</span><br><span class="line">=== 使用指针 ===</span><br><span class="line">Dog barks: Woof! Woof!</span><br><span class="line">Cat meows: Meow! Meow!</span><br><span class="line">Bird chirps: Tweet! Tweet!</span><br></pre></td></tr></table></figure>

<h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象基类（接口）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Shape</span>() = <span class="keyword">default</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">perimeter</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r) : <span class="built_in">radius</span>(r) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14159</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">perimeter</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14159</span> * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a circle with radius &quot;</span> &lt;&lt; radius &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> width, height;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">double</span> w, <span class="type">double</span> h) : <span class="built_in">width</span>(w), <span class="built_in">height</span>(h) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">perimeter</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (width + height);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a rectangle &quot;</span> &lt;&lt; width &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; height &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;std::unique_ptr&lt;Shape&gt;&gt; shapes;</span><br><span class="line">    shapes.<span class="built_in">push_back</span>(std::<span class="built_in">make_unique</span>&lt;Circle&gt;(<span class="number">5.0</span>));</span><br><span class="line">    shapes.<span class="built_in">push_back</span>(std::<span class="built_in">make_unique</span>&lt;Rectangle&gt;(<span class="number">4.0</span>, <span class="number">6.0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; shape : shapes) &#123;</span><br><span class="line">        shape-&gt;<span class="built_in">draw</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Area: &quot;</span> &lt;&lt; shape-&gt;<span class="built_in">area</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Perimeter: &quot;</span> &lt;&lt; shape-&gt;<span class="built_in">perimeter</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="虚函数的优点"><a href="#虚函数的优点" class="headerlink" title="虚函数的优点"></a>虚函数的优点</h2><ol>
<li><strong>真正的运行时多态</strong>：可以在运行时根据对象的实际类型调用正确的函数</li>
<li><strong>类型安全</strong>：通过基类指针或引用操作派生类对象</li>
<li><strong>易于理解</strong>：符合直觉的面向对象编程方式</li>
<li><strong>灵活性高</strong>：可以在运行时动态确定对象类型和行为</li>
</ol>
<h2 id="虚函数的缺点"><a href="#虚函数的缺点" class="headerlink" title="虚函数的缺点"></a>虚函数的缺点</h2><ol>
<li><p><strong>性能开销</strong>：</p>
<ul>
<li>每次调用需要通过vptr查找vtable，再查找函数地址（间接调用）</li>
<li>无法内联优化</li>
<li>每个对象需要额外存储vptr（通常8字节）</li>
</ul>
</li>
<li><p><strong>内存开销</strong>：</p>
<ul>
<li>每个类需要维护一个vtable</li>
<li>每个对象需要一个vptr指针</li>
</ul>
</li>
<li><p><strong>缓存不友好</strong>：指针跳转可能导致缓存未命中</p>
</li>
</ol>
<hr>
<h1 id="CRTP（奇异递归模板模式）"><a href="#CRTP（奇异递归模板模式）" class="headerlink" title="CRTP（奇异递归模板模式）"></a>CRTP（奇异递归模板模式）</h1><h2 id="什么是CRTP？"><a href="#什么是CRTP？" class="headerlink" title="什么是CRTP？"></a>什么是CRTP？</h2><p>CRTP是一种C++模板编程技巧，其特点是<strong>派生类将自己作为模板参数传递给基类模板</strong>。这种模式实现了<strong>编译时多态（Compile-time Polymorphism）</strong>，也被称为”静态多态”。</p>
<h3 id="CRTP基本形式"><a href="#CRTP基本形式" class="headerlink" title="CRTP基本形式"></a>CRTP基本形式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用派生类的实现</span></span><br><span class="line">        <span class="built_in">static_cast</span>&lt;Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">implementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base&lt;Derived&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">implementation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="CRTP的工作原理"><a href="#CRTP的工作原理" class="headerlink" title="CRTP的工作原理"></a>CRTP的工作原理</h2><p>CRTP的核心思想是：</p>
<ol>
<li><strong>编译时绑定</strong>：在编译期就确定要调用的函数，不需要运行时查找</li>
<li><strong>static_cast向下转型</strong>：基类通过<code>static_cast&lt;Derived*&gt;(this)</code>转换为派生类指针</li>
<li><strong>模板实例化</strong>：每个派生类都会生成一个独立的基类实例</li>
<li><strong>零开销抽象</strong>：没有虚函数表和虚指针，函数可以内联</li>
</ol>
<h2 id="CRTP使用示例"><a href="#CRTP使用示例" class="headerlink" title="CRTP使用示例"></a>CRTP使用示例</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CRTP基类</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">makeSoundImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">moveImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">describe</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;This animal: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">makeSound</span>();</span><br><span class="line">        <span class="built_in">move</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：狗</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal&lt;Dog&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSoundImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog barks: Woof! Woof!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog runs on four legs&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：猫</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal&lt;Cat&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSoundImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat meows: Meow! Meow!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat walks gracefully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类：鸟</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="keyword">public</span> Animal&lt;Bird&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSoundImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bird chirps: Tweet! Tweet!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bird flies in the sky&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板函数处理CRTP对象</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">demonstrateAnimal</span><span class="params">(<span class="type">const</span> Animal&lt;T&gt;&amp; animal)</span> </span>&#123;</span><br><span class="line">    animal.<span class="built_in">describe</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    Cat cat;</span><br><span class="line">    Bird bird;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=== CRTP 编译时多态演示 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">demonstrateAnimal</span>(dog);</span><br><span class="line">    <span class="built_in">demonstrateAnimal</span>(cat);</span><br><span class="line">    <span class="built_in">demonstrateAnimal</span>(bird);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接调用</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=== 直接调用 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    dog.<span class="built_in">makeSound</span>();</span><br><span class="line">    cat.<span class="built_in">makeSound</span>();</span><br><span class="line">    bird.<span class="built_in">makeSound</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实用示例：实现通用的比较运算符"><a href="#实用示例：实现通用的比较运算符" class="headerlink" title="实用示例：实现通用的比较运算符"></a>实用示例：实现通用的比较运算符</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CRTP基类：提供所有比较运算符</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 只需要派生类实现 &lt; 运算符，其他运算符自动生成</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">lessThan</span>(rhs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> rhs &lt; lhs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> !(lhs &gt; rhs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> !(lhs &lt; rhs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> !(lhs &lt; rhs) &amp;&amp; !(rhs &lt; lhs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Derived&amp; lhs, <span class="type">const</span> Derived&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> !(lhs == rhs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类：只需实现 lessThan 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> : <span class="keyword">public</span> Comparable&lt;Point&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只需实现这一个方法</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lessThan</span><span class="params">(<span class="type">const</span> Point&amp; other)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != other.x) <span class="keyword">return</span> x &lt; other.x;</span><br><span class="line">        <span class="keyword">return</span> y &lt; other.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p3</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1: &quot;</span>; p<span class="number">1.</span><span class="built_in">print</span>(); std::cout &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p2: &quot;</span>; p<span class="number">2.</span><span class="built_in">print</span>(); std::cout &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p3: &quot;</span>; p<span class="number">3.</span><span class="built_in">print</span>(); std::cout &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n=== 比较运算符测试 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1 &lt; p2: &quot;</span> &lt;&lt; (p1 &lt; p2) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1 &gt; p2: &quot;</span> &lt;&lt; (p1 &gt; p2) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1 == p3: &quot;</span> &lt;&lt; (p1 == p3) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1 != p2: &quot;</span> &lt;&lt; (p1 != p2) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p1 &lt;= p3: &quot;</span> &lt;&lt; (p1 &lt;= p3) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p2 &gt;= p1: &quot;</span> &lt;&lt; (p2 &gt;= p1) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实用示例：计数器（统计类的实例数量）"><a href="#实用示例：计数器（统计类的实例数量）" class="headerlink" title="实用示例：计数器（统计类的实例数量）"></a>实用示例：计数器（统计类的实例数量）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CRTP基类：自动计数每个类的实例数量</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>() &#123;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Counter</span>(<span class="type">const</span> Counter&amp;) &#123;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Counter</span>() &#123;</span><br><span class="line">        --count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员初始化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="type">int</span> Counter&lt;Derived&gt;::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用计数器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Counter&lt;Dog&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Dog created&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    ~<span class="built_in">Dog</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Dog destroyed&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Counter&lt;Cat&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cat</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Cat created&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    ~<span class="built_in">Cat</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Cat destroyed&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Initial Dog count: &quot;</span> &lt;&lt; Dog::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Initial Cat count: &quot;</span> &lt;&lt; Cat::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        Dog d1, d2;</span><br><span class="line">        Cat c1;</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;\nCurrent Dog count: &quot;</span> &lt;&lt; Dog::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Current Cat count: &quot;</span> &lt;&lt; Cat::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            Dog d3;</span><br><span class="line">            Cat c2, c3;</span><br><span class="line">            </span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;\nInner scope Dog count: &quot;</span> &lt;&lt; Dog::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Inner scope Cat count: &quot;</span> &lt;&lt; Cat::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;\nAfter inner scope Dog count: &quot;</span> &lt;&lt; Dog::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;After inner scope Cat count: &quot;</span> &lt;&lt; Cat::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\nFinal Dog count: &quot;</span> &lt;&lt; Dog::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Final Cat count: &quot;</span> &lt;&lt; Cat::<span class="built_in">getCount</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高级示例：实现接口的静态多态"><a href="#高级示例：实现接口的静态多态" class="headerlink" title="高级示例：实现接口的静态多态"></a>高级示例：实现接口的静态多态</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CRTP基类定义形状接口</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">areaImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">perimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">perimeterImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">drawImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">draw</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Area: &quot;</span> &lt;&lt; <span class="built_in">area</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Perimeter: &quot;</span> &lt;&lt; <span class="built_in">perimeter</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape&lt;Circle&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r) : <span class="built_in">radius</span>(r) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">areaImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14159</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">perimeterImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14159</span> * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drawImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing Circle (radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape&lt;Rectangle&gt; &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> width, height;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">double</span> w, <span class="type">double</span> h) : <span class="built_in">width</span>(w), <span class="built_in">height</span>(h) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">areaImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">perimeterImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (width + height);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drawImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing Rectangle (&quot;</span> &lt;&lt; width &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; height &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板函数，可以处理任何Shape&lt;T&gt;类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processShape</span><span class="params">(<span class="type">const</span> Shape&lt;T&gt;&amp; shape)</span> </span>&#123;</span><br><span class="line">    shape.<span class="built_in">printInfo</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">circle</span><span class="params">(<span class="number">5.0</span>)</span></span>;</span><br><span class="line">    <span class="function">Rectangle <span class="title">rect</span><span class="params">(<span class="number">4.0</span>, <span class="number">6.0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=== CRTP Shape 示例 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">processShape</span>(circle);</span><br><span class="line">    <span class="built_in">processShape</span>(rect);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CRTP的优点"><a href="#CRTP的优点" class="headerlink" title="CRTP的优点"></a>CRTP的优点</h2><ol>
<li><p><strong>零性能开销</strong>：</p>
<ul>
<li>编译时绑定，无需vtable和vptr</li>
<li>函数可以内联，编译器可以进行更多优化</li>
<li>无间接调用开销</li>
</ul>
</li>
<li><p><strong>无内存开销</strong>：</p>
<ul>
<li>不需要虚指针</li>
<li>对象大小仅包含实际成员变量</li>
</ul>
</li>
<li><p><strong>类型安全</strong>：编译时类型检查</p>
</li>
<li><p><strong>高性能</strong>：适合性能敏感的场景</p>
</li>
</ol>
<h2 id="CRTP的缺点"><a href="#CRTP的缺点" class="headerlink" title="CRTP的缺点"></a>CRTP的缺点</h2><ol>
<li><p><strong>编译时绑定</strong>：</p>
<ul>
<li>不支持运行时多态</li>
<li>无法在容器中存储不同派生类的对象（不能用<code>std::vector&lt;Base*&gt;</code>）</li>
</ul>
</li>
<li><p><strong>代码复杂度</strong>：</p>
<ul>
<li>模板语法较为复杂</li>
<li>编译错误信息可能难以理解</li>
</ul>
</li>
<li><p><strong>灵活性受限</strong>：</p>
<ul>
<li>必须在编译期知道具体类型</li>
<li>无法实现纯粹的接口抽象</li>
</ul>
</li>
<li><p><strong>代码膨胀</strong>：每个派生类都会实例化一份基类模板代码</p>
</li>
</ol>
<hr>
<h1 id="虚函数-vs-CRTP-对比分析"><a href="#虚函数-vs-CRTP-对比分析" class="headerlink" title="虚函数 vs CRTP 对比分析"></a>虚函数 vs CRTP 对比分析</h1><h2 id="核心差异对比表"><a href="#核心差异对比表" class="headerlink" title="核心差异对比表"></a>核心差异对比表</h2><table>
<thead>
<tr>
<th>特性</th>
<th>虚函数（Virtual Functions）</th>
<th>CRTP</th>
</tr>
</thead>
<tbody><tr>
<td><strong>多态类型</strong></td>
<td>运行时多态（动态多态）</td>
<td>编译时多态（静态多态）</td>
</tr>
<tr>
<td><strong>绑定时机</strong></td>
<td>运行时绑定</td>
<td>编译时绑定</td>
</tr>
<tr>
<td><strong>实现机制</strong></td>
<td>vtable + vptr</td>
<td>模板 + static_cast</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>有间接调用开销</td>
<td>零开销，可内联</td>
</tr>
<tr>
<td><strong>内存开销</strong></td>
<td>每对象8字节vptr + 每类vtable</td>
<td>无额外开销</td>
</tr>
<tr>
<td><strong>函数调用方式</strong></td>
<td>通过vptr查找vtable</td>
<td>直接函数调用</td>
</tr>
<tr>
<td><strong>内联优化</strong></td>
<td>通常无法内联</td>
<td>可以内联</td>
</tr>
<tr>
<td><strong>异构容器</strong></td>
<td>支持（<code>vector&lt;Base*&gt;</code>）</td>
<td>不支持</td>
</tr>
<tr>
<td><strong>运行时类型识别</strong></td>
<td>支持（RTTI）</td>
<td>不支持</td>
</tr>
<tr>
<td><strong>代码复杂度</strong></td>
<td>简单直观</td>
<td>较复杂（模板）</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>需要运行时决定行为</td>
<td>性能关键且类型确定</td>
</tr>
</tbody></table>
<h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><h3 id="性能测试代码"><a href="#性能测试代码" class="headerlink" title="性能测试代码"></a>性能测试代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 虚函数版本 =====</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualBase</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">VirtualBase</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">compute</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualDerived</span> : <span class="keyword">public</span> VirtualBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">compute</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== CRTP版本 =====</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRTPBase</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">compute</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">computeImpl</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRTPDerived</span> : <span class="keyword">public</span> CRTPBase&lt;CRTPDerived&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">computeImpl</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 性能测试 =====</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ITERATIONS = <span class="number">100&#x27;000&#x27;000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试虚函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        VirtualDerived obj;</span><br><span class="line">        VirtualBase* ptr = &amp;obj;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ITERATIONS; ++i) &#123;</span><br><span class="line">            sum += ptr-&gt;<span class="built_in">compute</span>(i % <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - start);</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;虚函数版本:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;  耗时: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;  结果: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试CRTP</span></span><br><span class="line">    &#123;</span><br><span class="line">        CRTPDerived obj;</span><br><span class="line">        <span class="type">const</span> CRTPBase&lt;CRTPDerived&gt;&amp; ref = obj;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ITERATIONS; ++i) &#123;</span><br><span class="line">            sum += ref.<span class="built_in">compute</span>(i % <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - start);</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;CRTP版本:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;  耗时: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;  结果: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试对象大小</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n=== 内存开销对比 ===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;VirtualDerived 大小: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(VirtualDerived) &lt;&lt; <span class="string">&quot; bytes&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;CRTPDerived 大小: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(CRTPDerived) &lt;&lt; <span class="string">&quot; bytes&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>典型输出（优化编译 -O3）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">虚函数版本:</span><br><span class="line">  耗时: 450 ms</span><br><span class="line">  结果: 171650000000</span><br><span class="line"></span><br><span class="line">CRTP版本:</span><br><span class="line">  耗时: 85 ms</span><br><span class="line">  结果: 171650000000</span><br><span class="line"></span><br><span class="line">=== 内存开销对比 ===</span><br><span class="line">VirtualDerived 大小: 8 bytes  (vptr)</span><br><span class="line">CRTPDerived 大小: 1 bytes      (空类优化)</span><br></pre></td></tr></table></figure>

<p><strong>性能分析：</strong></p>
<ul>
<li>CRTP通常比虚函数<strong>快3-6倍</strong>（取决于编译器优化）</li>
<li>CRTP可以被完全内联，减少函数调用开销</li>
<li>虚函数需要间接调用，影响CPU指令流水线和缓存</li>
</ul>
<h2 id="使用场景对比"><a href="#使用场景对比" class="headerlink" title="使用场景对比"></a>使用场景对比</h2><h3 id="适合使用虚函数的场景"><a href="#适合使用虚函数的场景" class="headerlink" title="适合使用虚函数的场景"></a>适合使用虚函数的场景</h3><ol>
<li><p><strong>需要运行时多态</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异构容器：在同一容器中存储不同类型对象</span></span><br><span class="line">std::vector&lt;std::unique_ptr&lt;Animal&gt;&gt; animals;</span><br><span class="line">animals.<span class="built_in">push_back</span>(std::<span class="built_in">make_unique</span>&lt;Dog&gt;());</span><br><span class="line">animals.<span class="built_in">push_back</span>(std::<span class="built_in">make_unique</span>&lt;Cat&gt;());</span><br><span class="line">animals.<span class="built_in">push_back</span>(std::<span class="built_in">make_unique</span>&lt;Bird&gt;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; animal : animals) &#123;</span><br><span class="line">    animal-&gt;<span class="built_in">makeSound</span>();  <span class="comment">// 运行时决定调用哪个版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>插件系统和框架设计</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义插件接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Plugin</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">initialize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态加载不同插件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>需要RTTI（运行时类型信息）</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Animal* animal = <span class="built_in">getRandomAnimal</span>();</span><br><span class="line"><span class="keyword">if</span> (Dog* dog = <span class="built_in">dynamic_cast</span>&lt;Dog*&gt;(animal)) &#123;</span><br><span class="line">    dog-&gt;<span class="built_in">fetch</span>();  <span class="comment">// Dog特有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标准库风格的设计</strong>（如标准容器、流等）</p>
</li>
</ol>
<h3 id="适合使用CRTP的场景"><a href="#适合使用CRTP的场景" class="headerlink" title="适合使用CRTP的场景"></a>适合使用CRTP的场景</h3><ol>
<li><p><strong>性能关键代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数学库、图形处理、游戏引擎等</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector3D</span> : <span class="keyword">public</span> VectorOperations&lt;Vector3D&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// 高性能向量运算</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编译时已知的固定类型集合</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">const</span> Shape&lt;T&gt;&amp; shape)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译时知道具体类型，可以完全优化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Mixin模式（混入功能）</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> Printable&lt;MyClass&gt;,</span><br><span class="line">                <span class="keyword">public</span> Serializable&lt;MyClass&gt;,</span><br><span class="line">                <span class="keyword">public</span> Comparable&lt;MyClass&gt; &#123;</span><br><span class="line">    <span class="comment">// 通过CRTP混入多种功能</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>避免虚函数开销的库设计</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如 std::enable_shared_from_this</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;Widget&gt; &#123;</span><br><span class="line">    <span class="comment">// CRTP实现，无虚函数开销</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="选择指南"><a href="#选择指南" class="headerlink" title="选择指南"></a>选择指南</h2><h3 id="使用虚函数，如果："><a href="#使用虚函数，如果：" class="headerlink" title="使用虚函数，如果："></a>使用虚函数，如果：</h3><ul>
<li>✅ 需要在运行时根据对象类型做决策</li>
<li>✅ 需要异构容器存储不同类型对象</li>
<li>✅ 需要支持动态加载&#x2F;插件系统</li>
<li>✅ 性能不是首要关注点</li>
<li>✅ 团队更熟悉传统OOP</li>
<li>✅ 需要使用<code>dynamic_cast</code>或<code>typeid</code></li>
</ul>
<h3 id="使用CRTP，如果："><a href="#使用CRTP，如果：" class="headerlink" title="使用CRTP，如果："></a>使用CRTP，如果：</h3><ul>
<li>✅ 性能是关键考虑因素</li>
<li>✅ 编译时就知道所有类型</li>
<li>✅ 需要零开销的代码复用</li>
<li>✅ 实现Mixin模式或策略模式</li>
<li>✅ 希望函数可以内联优化</li>
<li>✅ 不需要异构容器</li>
</ul>
<h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>在某些场景下，可以结合两者：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类使用虚函数提供运行时多态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某些派生类使用CRTP优化性能</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastAnimal</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Derived*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">makeSoundImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> FastAnimal&lt;Dog&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSoundImpl</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Woof!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="实际案例分析"><a href="#实际案例分析" class="headerlink" title="实际案例分析"></a>实际案例分析</h2><h3 id="案例1：标准库中的应用"><a href="#案例1：标准库中的应用" class="headerlink" title="案例1：标准库中的应用"></a>案例1：标准库中的应用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// std::enable_shared_from_this 使用CRTP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;Widget&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Widget&gt; <span class="title">getShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();  <span class="comment">// CRTP提供的功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// std::iostream 使用虚函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stream</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">stream</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* data, <span class="type">size_t</span> size)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="案例2：游戏开发"><a href="#案例2：游戏开发" class="headerlink" title="案例2：游戏开发"></a>案例2：游戏开发</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高性能物理计算使用CRTP</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhysicsObject</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">float</span> dt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; derived = <span class="built_in">static_cast</span>&lt;Derived&amp;&gt;(*<span class="keyword">this</span>);</span><br><span class="line">        derived.<span class="built_in">updatePhysics</span>(dt);  <span class="comment">// 零开销调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏对象层次使用虚函数（需要异构集合）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObject</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">GameObject</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">float</span> dt)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::unique_ptr&lt;GameObject&gt;&gt; gameObjects;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="核心要点"><a href="#核心要点" class="headerlink" title="核心要点"></a>核心要点</h2><ol>
<li><p><strong>虚函数</strong>是C++实现<strong>运行时多态</strong>的经典机制</p>
<ul>
<li>基于vtable和vptr</li>
<li>灵活但有性能开销</li>
<li>适合需要运行时决策的场景</li>
</ul>
</li>
<li><p><strong>CRTP</strong>是利用模板实现<strong>编译时多态</strong>的技巧</p>
<ul>
<li>零开销抽象</li>
<li>高性能但灵活性受限</li>
<li>适合性能关键且类型确定的场景</li>
</ul>
</li>
<li><p><strong>选择原则</strong>：</p>
<ul>
<li>需要运行时灵活性 → 虚函数</li>
<li>追求极致性能 → CRTP</li>
<li>根据具体需求权衡</li>
</ul>
</li>
</ol>
<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol>
<li><strong>默认使用虚函数</strong>，除非性能测试证明有必要优化</li>
<li><strong>性能敏感路径</strong>考虑CRTP</li>
<li><strong>不要过度优化</strong>，代码可读性同样重要</li>
<li><strong>充分利用编译器优化</strong>（-O2&#x2F;-O3）</li>
<li><strong>根据项目需求和团队经验</strong>选择合适的方案</li>
</ol>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul>
<li>C++ Concepts（C++20）提供了另一种编译时多态机制</li>
<li>std::variant 和 std::visit 提供了类型安全的运行时多态替代方案</li>
<li>Policy-based design 是CRTP的高级应用</li>
</ul>
<hr>
<p>希望这篇文档能帮助你深入理解虚函数和CRTP！如有疑问，欢迎讨论交流。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
